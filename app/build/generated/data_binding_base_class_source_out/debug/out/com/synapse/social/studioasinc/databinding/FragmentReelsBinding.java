// Generated by view binder compiler. Do not edit!
package com.synapse.social.studioasinc.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.synapse.social.studioasinc.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentReelsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout loadedBody;

  @NonNull
  public final RelativeLayout middleRelative;

  @NonNull
  public final LinearLayout middleRelativeTop;

  @NonNull
  public final SwipeRefreshLayout middleRelativeTopSwipe;

  @NonNull
  public final LinearLayout middleRelativeTopSwipeBody;

  @NonNull
  public final RecyclerView videosRecyclerView;

  private FragmentReelsBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout loadedBody,
      @NonNull RelativeLayout middleRelative, @NonNull LinearLayout middleRelativeTop,
      @NonNull SwipeRefreshLayout middleRelativeTopSwipe,
      @NonNull LinearLayout middleRelativeTopSwipeBody, @NonNull RecyclerView videosRecyclerView) {
    this.rootView = rootView;
    this.loadedBody = loadedBody;
    this.middleRelative = middleRelative;
    this.middleRelativeTop = middleRelativeTop;
    this.middleRelativeTopSwipe = middleRelativeTopSwipe;
    this.middleRelativeTopSwipeBody = middleRelativeTopSwipeBody;
    this.videosRecyclerView = videosRecyclerView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentReelsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentReelsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_reels, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentReelsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.loadedBody;
      LinearLayout loadedBody = ViewBindings.findChildViewById(rootView, id);
      if (loadedBody == null) {
        break missingId;
      }

      id = R.id.middleRelative;
      RelativeLayout middleRelative = ViewBindings.findChildViewById(rootView, id);
      if (middleRelative == null) {
        break missingId;
      }

      id = R.id.middleRelativeTop;
      LinearLayout middleRelativeTop = ViewBindings.findChildViewById(rootView, id);
      if (middleRelativeTop == null) {
        break missingId;
      }

      id = R.id.middleRelativeTopSwipe;
      SwipeRefreshLayout middleRelativeTopSwipe = ViewBindings.findChildViewById(rootView, id);
      if (middleRelativeTopSwipe == null) {
        break missingId;
      }

      id = R.id.middleRelativeTopSwipeBody;
      LinearLayout middleRelativeTopSwipeBody = ViewBindings.findChildViewById(rootView, id);
      if (middleRelativeTopSwipeBody == null) {
        break missingId;
      }

      id = R.id.videosRecyclerView;
      RecyclerView videosRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (videosRecyclerView == null) {
        break missingId;
      }

      return new FragmentReelsBinding((LinearLayout) rootView, loadedBody, middleRelative,
          middleRelativeTop, middleRelativeTopSwipe, middleRelativeTopSwipeBody,
          videosRecyclerView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
