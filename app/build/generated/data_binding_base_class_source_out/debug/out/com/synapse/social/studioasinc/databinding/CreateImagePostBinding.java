// Generated by view binder compiler. Do not edit!
package com.synapse.social.studioasinc.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.synapse.social.studioasinc.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CreateImagePostBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button FromUrl;

  @NonNull
  public final LinearLayout Main;

  @NonNull
  public final ImageView back;

  @NonNull
  public final LinearLayout body;

  @NonNull
  public final LinearLayout bottomButtons;

  @NonNull
  public final Button continueButton;

  @NonNull
  public final ImageView imagePreview;

  @NonNull
  public final RecyclerView imagesView;

  @NonNull
  public final LinearLayout main;

  @NonNull
  public final Button selectGallery;

  @NonNull
  public final TextView title;

  @NonNull
  public final LinearLayout top;

  @NonNull
  public final LinearLayout topSpc;

  @NonNull
  public final LinearLayout urlImagePreview;

  @NonNull
  public final ImageView urlImagePreviewImage;

  private CreateImagePostBinding(@NonNull LinearLayout rootView, @NonNull Button FromUrl,
      @NonNull LinearLayout Main, @NonNull ImageView back, @NonNull LinearLayout body,
      @NonNull LinearLayout bottomButtons, @NonNull Button continueButton,
      @NonNull ImageView imagePreview, @NonNull RecyclerView imagesView, @NonNull LinearLayout main,
      @NonNull Button selectGallery, @NonNull TextView title, @NonNull LinearLayout top,
      @NonNull LinearLayout topSpc, @NonNull LinearLayout urlImagePreview,
      @NonNull ImageView urlImagePreviewImage) {
    this.rootView = rootView;
    this.FromUrl = FromUrl;
    this.Main = Main;
    this.back = back;
    this.body = body;
    this.bottomButtons = bottomButtons;
    this.continueButton = continueButton;
    this.imagePreview = imagePreview;
    this.imagesView = imagesView;
    this.main = main;
    this.selectGallery = selectGallery;
    this.title = title;
    this.top = top;
    this.topSpc = topSpc;
    this.urlImagePreview = urlImagePreview;
    this.urlImagePreviewImage = urlImagePreviewImage;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CreateImagePostBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CreateImagePostBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.create_image_post, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CreateImagePostBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.From_url;
      Button FromUrl = ViewBindings.findChildViewById(rootView, id);
      if (FromUrl == null) {
        break missingId;
      }

      LinearLayout Main = (LinearLayout) rootView;

      id = R.id.back;
      ImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.body;
      LinearLayout body = ViewBindings.findChildViewById(rootView, id);
      if (body == null) {
        break missingId;
      }

      id = R.id.bottomButtons;
      LinearLayout bottomButtons = ViewBindings.findChildViewById(rootView, id);
      if (bottomButtons == null) {
        break missingId;
      }

      id = R.id.continueButton;
      Button continueButton = ViewBindings.findChildViewById(rootView, id);
      if (continueButton == null) {
        break missingId;
      }

      id = R.id.image_preview;
      ImageView imagePreview = ViewBindings.findChildViewById(rootView, id);
      if (imagePreview == null) {
        break missingId;
      }

      id = R.id.imagesView;
      RecyclerView imagesView = ViewBindings.findChildViewById(rootView, id);
      if (imagesView == null) {
        break missingId;
      }

      id = R.id.main;
      LinearLayout main = ViewBindings.findChildViewById(rootView, id);
      if (main == null) {
        break missingId;
      }

      id = R.id.selectGallery;
      Button selectGallery = ViewBindings.findChildViewById(rootView, id);
      if (selectGallery == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.top;
      LinearLayout top = ViewBindings.findChildViewById(rootView, id);
      if (top == null) {
        break missingId;
      }

      id = R.id.topSpc;
      LinearLayout topSpc = ViewBindings.findChildViewById(rootView, id);
      if (topSpc == null) {
        break missingId;
      }

      id = R.id.urlImagePreview;
      LinearLayout urlImagePreview = ViewBindings.findChildViewById(rootView, id);
      if (urlImagePreview == null) {
        break missingId;
      }

      id = R.id.urlImagePreviewImage;
      ImageView urlImagePreviewImage = ViewBindings.findChildViewById(rootView, id);
      if (urlImagePreviewImage == null) {
        break missingId;
      }

      return new CreateImagePostBinding((LinearLayout) rootView, FromUrl, Main, back, body,
          bottomButtons, continueButton, imagePreview, imagesView, main, selectGallery, title, top,
          topSpc, urlImagePreview, urlImagePreviewImage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
