// Generated by view binder compiler. Do not edit!
package com.synapse.social.studioasinc.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.imageview.ShapeableImageView;
import com.synapse.social.studioasinc.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemMessageIncomingBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout attachmentContainer;

  @NonNull
  public final MaterialButton btnReact;

  @NonNull
  public final MaterialButton btnReply;

  @NonNull
  public final ChipGroup chipGroupReactions;

  @NonNull
  public final ImageView ivAttachment;

  @NonNull
  public final ShapeableImageView ivSenderAvatar;

  @NonNull
  public final LinearLayout messageActions;

  @NonNull
  public final MaterialCardView messageBubble;

  @NonNull
  public final LinearLayout replyPreview;

  @NonNull
  public final TextView tvEdited;

  @NonNull
  public final TextView tvMessageText;

  @NonNull
  public final TextView tvReplyPreview;

  @NonNull
  public final TextView tvReplyTo;

  @NonNull
  public final TextView tvSenderName;

  @NonNull
  public final TextView tvTimestamp;

  private ItemMessageIncomingBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout attachmentContainer, @NonNull MaterialButton btnReact,
      @NonNull MaterialButton btnReply, @NonNull ChipGroup chipGroupReactions,
      @NonNull ImageView ivAttachment, @NonNull ShapeableImageView ivSenderAvatar,
      @NonNull LinearLayout messageActions, @NonNull MaterialCardView messageBubble,
      @NonNull LinearLayout replyPreview, @NonNull TextView tvEdited,
      @NonNull TextView tvMessageText, @NonNull TextView tvReplyPreview,
      @NonNull TextView tvReplyTo, @NonNull TextView tvSenderName, @NonNull TextView tvTimestamp) {
    this.rootView = rootView;
    this.attachmentContainer = attachmentContainer;
    this.btnReact = btnReact;
    this.btnReply = btnReply;
    this.chipGroupReactions = chipGroupReactions;
    this.ivAttachment = ivAttachment;
    this.ivSenderAvatar = ivSenderAvatar;
    this.messageActions = messageActions;
    this.messageBubble = messageBubble;
    this.replyPreview = replyPreview;
    this.tvEdited = tvEdited;
    this.tvMessageText = tvMessageText;
    this.tvReplyPreview = tvReplyPreview;
    this.tvReplyTo = tvReplyTo;
    this.tvSenderName = tvSenderName;
    this.tvTimestamp = tvTimestamp;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemMessageIncomingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemMessageIncomingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_message_incoming, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemMessageIncomingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.attachmentContainer;
      LinearLayout attachmentContainer = ViewBindings.findChildViewById(rootView, id);
      if (attachmentContainer == null) {
        break missingId;
      }

      id = R.id.btnReact;
      MaterialButton btnReact = ViewBindings.findChildViewById(rootView, id);
      if (btnReact == null) {
        break missingId;
      }

      id = R.id.btnReply;
      MaterialButton btnReply = ViewBindings.findChildViewById(rootView, id);
      if (btnReply == null) {
        break missingId;
      }

      id = R.id.chipGroupReactions;
      ChipGroup chipGroupReactions = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupReactions == null) {
        break missingId;
      }

      id = R.id.ivAttachment;
      ImageView ivAttachment = ViewBindings.findChildViewById(rootView, id);
      if (ivAttachment == null) {
        break missingId;
      }

      id = R.id.ivSenderAvatar;
      ShapeableImageView ivSenderAvatar = ViewBindings.findChildViewById(rootView, id);
      if (ivSenderAvatar == null) {
        break missingId;
      }

      id = R.id.messageActions;
      LinearLayout messageActions = ViewBindings.findChildViewById(rootView, id);
      if (messageActions == null) {
        break missingId;
      }

      id = R.id.messageBubble;
      MaterialCardView messageBubble = ViewBindings.findChildViewById(rootView, id);
      if (messageBubble == null) {
        break missingId;
      }

      id = R.id.replyPreview;
      LinearLayout replyPreview = ViewBindings.findChildViewById(rootView, id);
      if (replyPreview == null) {
        break missingId;
      }

      id = R.id.tvEdited;
      TextView tvEdited = ViewBindings.findChildViewById(rootView, id);
      if (tvEdited == null) {
        break missingId;
      }

      id = R.id.tvMessageText;
      TextView tvMessageText = ViewBindings.findChildViewById(rootView, id);
      if (tvMessageText == null) {
        break missingId;
      }

      id = R.id.tvReplyPreview;
      TextView tvReplyPreview = ViewBindings.findChildViewById(rootView, id);
      if (tvReplyPreview == null) {
        break missingId;
      }

      id = R.id.tvReplyTo;
      TextView tvReplyTo = ViewBindings.findChildViewById(rootView, id);
      if (tvReplyTo == null) {
        break missingId;
      }

      id = R.id.tvSenderName;
      TextView tvSenderName = ViewBindings.findChildViewById(rootView, id);
      if (tvSenderName == null) {
        break missingId;
      }

      id = R.id.tvTimestamp;
      TextView tvTimestamp = ViewBindings.findChildViewById(rootView, id);
      if (tvTimestamp == null) {
        break missingId;
      }

      return new ItemMessageIncomingBinding((ConstraintLayout) rootView, attachmentContainer,
          btnReact, btnReply, chipGroupReactions, ivAttachment, ivSenderAvatar, messageActions,
          messageBubble, replyPreview, tvEdited, tvMessageText, tvReplyPreview, tvReplyTo,
          tvSenderName, tvTimestamp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
