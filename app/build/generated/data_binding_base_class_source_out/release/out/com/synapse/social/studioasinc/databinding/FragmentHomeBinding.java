// Generated by view binder compiler. Do not edit!
package com.synapse.social.studioasinc.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.synapse.social.studioasinc.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout PublicPostsBody;

  @NonNull
  public final RecyclerView PublicPostsList;

  @NonNull
  public final ProgressBar loadingBar;

  @NonNull
  public final LinearLayout loadingBody;

  @NonNull
  public final LinearLayout shimmerContainer;

  @NonNull
  public final SwipeRefreshLayout swipeLayout;

  @NonNull
  public final LinearLayout swipeLayoutBody;

  private FragmentHomeBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout PublicPostsBody,
      @NonNull RecyclerView PublicPostsList, @NonNull ProgressBar loadingBar,
      @NonNull LinearLayout loadingBody, @NonNull LinearLayout shimmerContainer,
      @NonNull SwipeRefreshLayout swipeLayout, @NonNull LinearLayout swipeLayoutBody) {
    this.rootView = rootView;
    this.PublicPostsBody = PublicPostsBody;
    this.PublicPostsList = PublicPostsList;
    this.loadingBar = loadingBar;
    this.loadingBody = loadingBody;
    this.shimmerContainer = shimmerContainer;
    this.swipeLayout = swipeLayout;
    this.swipeLayoutBody = swipeLayoutBody;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.PublicPostsBody;
      LinearLayout PublicPostsBody = ViewBindings.findChildViewById(rootView, id);
      if (PublicPostsBody == null) {
        break missingId;
      }

      id = R.id.PublicPostsList;
      RecyclerView PublicPostsList = ViewBindings.findChildViewById(rootView, id);
      if (PublicPostsList == null) {
        break missingId;
      }

      id = R.id.loading_bar;
      ProgressBar loadingBar = ViewBindings.findChildViewById(rootView, id);
      if (loadingBar == null) {
        break missingId;
      }

      id = R.id.loadingBody;
      LinearLayout loadingBody = ViewBindings.findChildViewById(rootView, id);
      if (loadingBody == null) {
        break missingId;
      }

      id = R.id.shimmer_container;
      LinearLayout shimmerContainer = ViewBindings.findChildViewById(rootView, id);
      if (shimmerContainer == null) {
        break missingId;
      }

      id = R.id.swipeLayout;
      SwipeRefreshLayout swipeLayout = ViewBindings.findChildViewById(rootView, id);
      if (swipeLayout == null) {
        break missingId;
      }

      id = R.id.swipeLayoutBody;
      LinearLayout swipeLayoutBody = ViewBindings.findChildViewById(rootView, id);
      if (swipeLayoutBody == null) {
        break missingId;
      }

      return new FragmentHomeBinding((LinearLayout) rootView, PublicPostsBody, PublicPostsList,
          loadingBar, loadingBody, shimmerContainer, swipeLayout, swipeLayoutBody);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
